bool areSimilar(int[] a, int[] b) {
    int[] diffs = a.Select((_, i) => i) //makes an array from 0 to a.Length and the value at each index is the index ex: [0, 1, 2, 3] 
    .Where(_ => a[_] != b[_]) //only keeps the values/indexes that are different ex: [2,3] 
    .ToArray(); 
    return diffs.Length == 0 || diffs.Length == 2 && a[diffs[0]] == b[diffs[1]] && b[diffs[0]] == a[diffs[1]];
}





//without linq
bool areSimilar(int[] a, int[] b) {
    int numDifElements = 0;
    int firstWrongIndex = -1;
    bool swapValid = false;
    for (int i = 0; i < a.Length; i++) {
        if (a[i] != b[i]) {
            numDifElements++;
            if (firstWrongIndex == -1) {
                firstWrongIndex = i;
            }
            else {
                if (a[i] == b[firstWrongIndex] && b[i] == a[firstWrongIndex]) {
                    swapValid = true;
                }
            }
        }
    }
    if (numDifElements == 0) {
        return true;
    }
    if (numDifElements == 2) {
        if (swapValid) {
            return true;
        }
    }
    return false;
}
